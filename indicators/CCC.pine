// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Template from Rabe Akademi
// © barton_

 //@version=5
 indicator(title='[wsh]Combined Candle Counter', shorttitle='[wsh]CCC', overlay=true, precision=2, max_bars_back = 501)

strategy = input(title='Skip D-Days calculation below MA?', defval=true)
count_anyway = input(title='Count below MA?', defval=false)
show_dis = input(title='Show D-Days?', defval=true)

ma_type = input.string(title='Moving Average Type', defval='exponential', options=['normal', 'weighted', 'exponential'])
ma_lenght_21 = input(title='MA 21', defval=21)
ma_lenght_50 = input(title='MA 50', defval=50)
ma_lenght_150 = input(title='MA 50', defval=150)
ma_lenght_200 = input(title='MA 200', defval=200)
ma_src = input(title='Source', defval=close)

// Im Wochenchart werden die Durchschnitte angepasst
if timeframe.isweekly
    ma_lenght_50 := 10
    ma_lenght_150 := 30
    ma_lenght_200 := 40

look_back = input.int(25, minval=1, title='Distribution Days Lookback')

ma_wk_len = input.int(21, title='Weekly MA Lenght', minval=1)
ma_wk_src = input(title='Weekly Source', defval=close)

float ma_show_21 = na
float ma_show_50 = na
float ma_show_150 = na
float ma_show_200 = na
float ma_show_wk = na
bool distribution = false
bool distribution_plot = false
var count = 0
cnt = 0
var label myLabel = label.new(x=0, y=0, textcolor=color.white, color=color.blue, style=label.style_label_left)
string sign = na
dt = time - time[1]

out_ema = ta.ema(ma_wk_src, ma_wk_len)
out_wma = ta.wma(ma_wk_src, ma_wk_len)
out_sma = ta.sma(ma_wk_src, ma_wk_len)
out_ema_w = request.security(syminfo.tickerid, 'W', out_ema)
out_wma_w = request.security(syminfo.tickerid, 'W', out_wma)
out_sma_w = request.security(syminfo.tickerid, 'W', out_sma)

if ma_type == 'normal'
    ma_show_21 := ta.sma(ma_src, ma_lenght_21)
    ma_show_50 := ta.sma(ma_src, ma_lenght_50)
    ma_show_150 := ta.sma(ma_src, ma_lenght_150)
    ma_show_200 := ta.sma(ma_src, ma_lenght_200)
    if timeframe.isdaily
        ma_show_wk := out_sma_w
        ma_show_wk
if ma_type == 'weighted'
    ma_show_21 := ta.wma(ma_src, ma_lenght_21)
    ma_show_50 := ta.wma(ma_src, ma_lenght_50)
    ma_show_150 := ta.wma(ma_src, ma_lenght_150)
    ma_show_200 := ta.wma(ma_src, ma_lenght_200)
    if timeframe.isdaily
        ma_show_wk := out_wma_w
        ma_show_wk
if ma_type == 'exponential'
    ma_show_21 := ta.ema(ma_src, ma_lenght_21)
    ma_show_50 := ta.ema(ma_src, ma_lenght_50)
    ma_show_150 := ta.ema(ma_src, ma_lenght_150)
    ma_show_200 := ta.ema(ma_src, ma_lenght_200)
    if timeframe.isdaily
        ma_show_wk := out_ema_w
        ma_show_wk

if close > ma_show_21
    if count < 0
        count := 0
        count
    count += 1
    count
else
    if count > 0
        count := 0
        count
    count -= 1
    count

if timeframe.isdaily
    down_bar = ta.change(close) < close[1] * -0.002 ? true : false
    volume_up = ta.change(volume) > 0 ? true : false
    distribution := down_bar and volume_up ? true : false

    if strategy
        distribution := distribution and close > ma_show_wk ? true : false
        distribution
    for i = 0 to look_back by 1
        if not count_anyway and close[0] < ma_show_wk[i]
            break
        if strategy and close[i] < ma_show_wk[i] and not count_anyway
            break
        if distribution[i]
            if not count_anyway and close[i] < ma_show_wk[i]
                break
            cnt += 1
            cnt

if count > 0
    sign := '+'
    sign

if math.sign(count) < 0
    label.set_color(id=myLabel, color=color.red)
else
    label.set_color(id=myLabel, color=color.green)

if show_dis
    distribution_plot := distribution
    distribution_plot

if timeframe.isdaily and show_dis
    label.set_text(id=myLabel, text='+/- Candles: ' + sign + str.tostring(count) + '\nD-Days: ' + str.tostring(cnt))
else
    label.set_text(id=myLabel, text='+/- Candles: ' + sign + str.tostring(count))

label.set_xloc(id=myLabel, x=time + dt / 2, xloc=xloc.bar_time)
label.set_y(id=myLabel, y=close)
plotchar(distribution_plot, char='D', color=color.new(color.fuchsia, 0), size=size.tiny)
plot(ma_show_21, title='MA 21', linewidth=2, color=color.new(#2962ff, 0))
plot(ma_show_50, title='MA 50', linewidth=2, color=color.new(#009E60, 0))
plot(ma_show_150, title='MA 150', linewidth=2, color=color.new(#FFCC00, 0))
plot(ma_show_200, title='MA 200', linewidth=2, color=color.new(#D9004C, 0))
plot(ma_show_wk, title='MA Weekly on Daily Chart', linewidth=1, color=color.new(#2962ff, 0))


//-------------------------------------------------------------------------
// study(title="VIX reversion-Buschi")
//-------------------------------------------------------------------------
points = input.int(3, minval=1, title='VIX Intra-day reversion points')
is_reversion = false

vix_high = request.security('VIX', 'D', high)
vix_close = request.security('VIX', 'D', close)

if timeframe.isdaily and syminfo.ticker == 'VIX'
    is_reversion := vix_high > 20 and vix_high - vix_close > points ? true : false
    is_reversion

plotchar(series=is_reversion, char='R', color=color.new(color.red, 0), size=size.tiny)

//---------------------------------------------------------------------------------
// "Support Resistance Channels", "SRchannel"  © LonesomeTheBlue
// Version 5.0
//---------------------------------------------------------------------------------
//study("Support Resistance Channels", "CCC", overlay = true, max_bars_back = 501)
prd = input.int(defval = 10, title="Pivot Period", minval = 4, maxval = 30, group = "SRchannel 🔨", tooltip="Used while calculating Pivot Points, checks left&right bars")
ppsrc = input.string(defval = 'High/Low', title="Source", options = ['High/Low', 'Close/Open'], group = "SRchannel 🔨", tooltip="Source for Pivot Points")
ChannelW = input.int(defval = 5, title = "Maximum Channel Width %", minval = 1, maxval = 8, group = "SRchannel 🔨", tooltip="Calculated using Highest/Lowest levels in 300 bars")
minstrength = input.int(defval = 1, title = "Minimum Strength", minval = 1, group = "SRchannel 🔨", tooltip = "Channel must contain at least 2 Pivot Points")
maxnumsr = input.int(defval = 10, title = "Maximum Number of S/R", minval = 1, maxval = 10, group = "SRchannel 🔨", tooltip = "Maximum number of Support/Resistance Channels to Show") - 1
loopback = input.int(defval = 360, title = "Loopback Period", minval = 100, maxval = 400, group = "SRchannel 🔨", tooltip="While calculating S/R levels it checks Pivots in Loopback Period")
res_col = input(defval = color.new(color.red, 75), title = "Resistance Color", group = "SRchannel Colors 🟡🟢🟣")
sup_col = input(defval = color.new(color.lime, 75), title = "Support Color", group = "SRchannel Colors 🟡🟢🟣")
inch_col = input(defval = color.new(color.gray, 75), title = "Color When Price in Channel", group = "SRchannel Colors 🟡🟢🟣")
// MAs
//showpp = input(defval = false, title = "Show Pivot Points", group = "Extras ⏶⏷")
//showsrbroken = input(defval = false, title = "Show Broken Support/Resistance", group = "Extras ⏶⏷")
//showthema1en = input(defval = false, title = "MA 1", inline = "ma1")
//showthema1len = input(defval = 50, title = "", inline = "ma1")
//showthema1type = input.string(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma1")
//showthema2en = input(defval = false, title = "MA 2", inline = "ma2")
//showthema2len = input(defval = 200, title = "", inline = "ma2")
//showthema2type = input.string(defval = "SMA", title = "", options = ["SMA", "EMA"], inline = "ma2")

//ma1 = showthema1en ? (showthema1type == "SMA" ? ta.sma(close, showthema1len) : ta.ema(close, showthema1len)) : na
//ma2 = showthema2en ? (showthema2type == "SMA" ? ta.sma(close, showthema2len) : ta.ema(close, showthema2len)) : na

//plot(ma1, color = not na(ma1) ? color.blue : na)
 //plot(ma2, color = not na(ma2) ? color.red : na)
// MAs

// get Pivot High/low
float src1 =  ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 =  ppsrc == 'High/Low' ? low: math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd) 

// draw Pivot points
//plotshape(ph and showpp, text = "H",  style = shape.labeldown, color = na, textcolor = color.red, location = location.abovebar, offset = -prd)
//plotshape(pl and showpp, text = "L",  style = shape.labelup, color = na, textcolor = color.lime, location = location.belowbar, offset = -prd)

//calculate maximum S/R channel width
prdhighest =  ta.highest(300)
prdlowest = ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ChannelW / 100

// get/keep Pivot levels
var pivotvals= array.new_float(0)
var pivotlocs= array.new_float(0)
if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    array.unshift(pivotlocs, bar_index)
    for x = array.size(pivotvals) - 1 to 0
        if bar_index - array.get(pivotlocs, x) > loopback // remove old pivot points
            array.pop(pivotvals)
            array.pop(pivotlocs)
            continue
        break

//find/create SR channel of a pivot point
get_sr_vals(ind)=>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1
        float cpp = array.get(pivotvals, y)
        float wdth = cpp <= hi ? hi - cpp : cpp - lo
        if wdth <= cwidth // fits the max channel width?
            if cpp <= hi
                lo := math.min(lo, cpp)
            else
                hi := math.max(hi, cpp)
                
            numpp := numpp + 20 // each pivot point added as 20
    [hi, lo, numpp] 

// keep old SR channels and calculate/sort new channels if we met new pivot point
var suportresistance = array.new_float(20, 0) // min/max levels
changeit(x, y)=>
    tmp = array.get(suportresistance, y * 2)
    array.set(suportresistance, y * 2, array.get(suportresistance, x * 2))
    array.set(suportresistance, x * 2, tmp)
    tmp := array.get(suportresistance, y * 2 + 1)
    array.set(suportresistance, y * 2 + 1, array.get(suportresistance, x * 2 + 1))
    array.set(suportresistance, x * 2 + 1, tmp)
    
if ph or pl
    supres = array.new_float(0)  // number of pivot, strength, min/max levels
    stren = array.new_float(10, 0)
    // get levels and strengs
    for x = 0 to array.size(pivotvals) - 1
        [hi, lo, strength] = get_sr_vals(x)
        array.push(supres, strength)
        array.push(supres, hi)
        array.push(supres, lo)
    
    // add each HL to strengh
    for x = 0 to array.size(pivotvals) - 1
        h = array.get(supres, x * 3 + 1)
        l = array.get(supres, x * 3 + 2)
        s = 0
        for y = 0 to loopback
            if (high[y] <= h and high[y] >= l) or
               (low[y] <= h and low[y] >= l)
                s := s + 1
        array.set(supres, x * 3, array.get(supres, x * 3) + s)
    
    //reset SR levels
    array.fill(suportresistance, 0)
    // get strongest SRs
    src = 0
    for x = 0 to array.size(pivotvals) - 1
        stv = -1. // value
        stl = -1 // location
        for y = 0 to array.size(pivotvals) - 1
            if array.get(supres, y * 3) > stv and array.get(supres, y * 3) >= minstrength * 20
                stv := array.get(supres, y * 3)
                stl := y
        if stl >= 0
            //get sr level
            hh = array.get(supres, stl * 3 + 1)
            ll = array.get(supres, stl * 3 + 2)
            array.set(suportresistance, src * 2, hh)
            array.set(suportresistance, src * 2 + 1, ll)
            array.set(stren, src, array.get(supres, stl * 3))
            
            // make included pivot points' strength zero 
            for y = 0 to array.size(pivotvals) - 1
                if (array.get(supres, y * 3 + 1) <= hh and array.get(supres, y * 3 + 1) >= ll) or
                   (array.get(supres, y * 3 + 2) <= hh and array.get(supres, y * 3 + 2) >= ll)
                    array.set(supres, y * 3, -1)

            src += 1
            if src >= 10
                break
    
    for x = 0 to 8
        for y = x + 1 to 9
            if array.get(stren, y) > array.get(stren, x)
                tmp = array.get(stren, y) 
                array.set(stren, y, array.get(stren, x))
                changeit(x, y)
                
    
get_level(ind)=>
    float ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind)
    ret
    
get_color(ind)=>
    color ret = na
    if ind < array.size(suportresistance)
        if array.get(suportresistance, ind) != 0
            ret := array.get(suportresistance, ind) > close and array.get(suportresistance, ind + 1) > close ? res_col :
                   array.get(suportresistance, ind) < close and array.get(suportresistance, ind + 1) < close ? sup_col :
                   inch_col
    ret

var srchannels = array.new_box(10)
for x = 0 to math.min(9, maxnumsr)
    box.delete(array.get(srchannels, x))
    srcol = get_color(x * 2)
    if not na(srcol)
        array.set(srchannels, x, 
                  box.new(left = bar_index, top = get_level(x * 2), right = bar_index + 1, bottom = get_level(x * 2 + 1), 
                          border_color = srcol, 
                          border_width = 1,
                          extend = extend.both, 
                          bgcolor = srcol))

resistancebroken = false
supportbroken = false

// check if it's not in a channel
not_in_a_channel = true
for x = 0 to math.min(9, maxnumsr)
    if close <= array.get(suportresistance, x * 2) and close >= array.get(suportresistance, x * 2 + 1) 
        not_in_a_channel := false

// if price is not in a channel then check broken ones
if not_in_a_channel
    for x = 0 to math.min(9, maxnumsr)
        if close[1] <= array.get(suportresistance, x * 2) and close > array.get(suportresistance, x * 2)
            resistancebroken := true
        if close[1] >= array.get(suportresistance, x * 2 + 1) and close < array.get(suportresistance, x * 2 + 1)
            supportbroken := true

alertcondition(resistancebroken, title = "Resistance Broken", message = "Resistance Broken")
alertcondition(supportbroken, title = "Support Broken", message = "Support Broken")
//plotshape(showsrbroken and resistancebroken, style = shape.triangleup, location = location.belowbar, color = color.new(color.lime, 0), size = size.tiny)
//plotshape(showsrbroken and supportbroken, style = shape.triangledown, location = location.abovebar, color = color.new(color.red, 0), size = size.tiny)
